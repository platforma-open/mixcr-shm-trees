ll := import("@platforma-sdk/workflow-tengo:ll")
smart := import("@platforma-sdk/workflow-tengo:smart")

json := import("json")

_P_COLUMN_DATA_RESOURCE_MAP := { Name: "PColumnData/ResourceMap", Version: "1" }

groupDataByDonorId := func(donorColumn, datasets) {
    // we need to form a pColumn with two axes:
	//    axes[0]: donorId
	//    axes[1]: sampleId
	//    axes[2]: mixcrclonotypingBlockId
	//      value: fileRef resource

	// we have:
	//    column of donorIds:
	//        axes[0]: sampleId
	//          value: donorId
	//    several columns of clns:
	//        axes[0]: sampleId
	//          value: fileRef resource

    donorColumnSpec := donorColumn.get("spec").getDataAsJson()

    sampleIdAxis = donorColumnSpec.axesSpec[0]

    resultSpec := {
        kind: "PColumn",
        name: "mixcr.com/clns",
        valueType: "File"
        // annotations and domain could differ between datasets
        axesSpec: [
            {
                name: donorColumnSpec.name,
                type: donorColumnSpec.valueType,
                domain: donorColumnSpec.domain,
                annotations: donorColumnSpec.annotations
            },
            sampleIdAxis,
            {
                name: "pl7.app/block",
                type: "String"
                annotations: {
                    "pl7.app/label": "Clonotyping block id"
                }
            }
        ]
    }

    // creating sample to donor map

    sampleToDonor := {}

    // columns with meta could be fetched as data direcctly
	for k, v in donorColumn.get("data").getDataAsJson()["data"] {
        sampleId := json.decode(k)[0]
        sampleToDonor[sampleId] = v
	}

    // build pColumn by hand
    dataBuilder := smart.structBuilder(_P_COLUMN_DATA_RESOURCE_MAP, json.encode({ keyLength: 3 }))

    // collect all the clns files that we have into pColumn
	for clonotypingBlockId, dataset in datasets {
		for sKey, fileRef in dataset.get("data").inputs() {
            sampleId := json.decode(sKey)[0]
            donor := sampleToDonor[sampleId]
            dataBuilder.createInputField(json.encode([donor, sampleId, clonotypingBlockId])).set(fileRef)
		}
    }

    return {
        spec: resultSpec,
        data: dataBuilder.lockAndBuild()
    }
}

// to use the file as a library, we should explicitly export functions
export ll.toStrict({
	groupDataByDonorId: groupDataByDonorId
})
