ll := import("@platforma-sdk/workflow-tengo:ll")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
slices := import("@platforma-sdk/workflow-tengo:slices")
json := import("json")

paggregateSw := assets.importSoftware("@platforma-open/milaboratories.software-ptransform:main")

ensureUniquenessParamsFromPconvParams := func(pfConvParams) {
    return {
        axes: slices.map(pfConvParams.axes, func(axis) {
            return axis.column
        }),
        columns: slices.map(pfConvParams.columns, func(col) {
            return col.column
        })
    }
}

/** Aggregating by-nodes output to make it uniquely addressable by it's native key */
ensureUniqueness := func(inputTsv, params, ...aggParams) {
    keyColumns := params.axes
    pickCols := params.columns

    aggregationWorkflow := undefined
    if len(aggParams) > 1 {
        pickCols := []
        for col in pickCols {
            pickCols = append(pickCols, [
                col,
                col
                ]
            )
        }

        rankingCol := aggParams[1]
        aggregationWorkflow = {
            steps: [ {
                type: "aggregate",
                groupBy: keyColumns,
                aggregations: [ {
                    type: aggParams[0],
                    rankingCol: rankingCol,
                    pickCols: pickCols
                } ]
            } ]
        }
    } else {
        aggregations := []
        for col in pickCols {
            aggregations = append(aggregations, {
                type: aggParams[0],
                src: col,
                dst: col
            })
        }

        aggregationWorkflow = { steps: [ {
                type: "aggregate",
                groupBy: keyColumns,
                aggregations: aggregations
            } ]
        }
    }

    aggregateCmd := exec.builder().
        printErrStreamToStdout().
        software(paggregateSw).
        arg("--workflow").arg("wf.json").
        writeFile("wf.json", json.encode(aggregationWorkflow)).
        arg("input.tsv").addFile("input.tsv", inputTsv).
        arg("output.tsv").saveFile("output.tsv").
        run()

    return aggregateCmd.getFile("output.tsv")
}

export ll.toStrict({
	ensureUniqueness: ensureUniqueness,
    ensureUniquenessParamsFromPconvParams: ensureUniquenessParamsFromPconvParams
})
