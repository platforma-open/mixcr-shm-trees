self := import("@platforma-sdk/workflow-tengo:tpl")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")
ll := import("@platforma-sdk/workflow-tengo:ll")
assets := import("@platforma-sdk/workflow-tengo:assets")
exec := import("@platforma-sdk/workflow-tengo:exec")

json := import("json")

// for usage in aggregate function, we should specify all outputs that will be used
self.defineOutputs(
    "trees", "treeNodes", "treeNodesWithClones",
    "tsvs",
    "allelesLog", "treesLog",
    "allelesReport", "treesReport",
    "allelesReportJson", "treesReportJson"
)

// import MiXCR as a software to use
mixcrSw := assets.importSoftware("@platforma-open/milaboratories.software-mixcr:main")

// env for MiXCR to format progress messages
progressPrefix := "[==PROGRESS==]"

self.body(func(inputs) {
	inputData := inputs[pConstants.VALUE_FIELD_NAME]
    globalParams := inputs.globalParams
    datasetTypes := globalParams.datasetTypes
    downsampling := globalParams.downsampling

    ll.print("__THE_LOG__ " + json.encode(datasetTypes))
    ll.print("__THE_LOG__ " + json.encode(downsampling))

    ll.assert(!is_undefined(datasetTypes), "datasetTypes undefined")

    allelesCmdBuilder := exec.builder().
        printErrStreamToStdout().
        secret("MI_LICENSE", "MI_LICENSE").
        env("MI_PROGRESS_PREFIX", progressPrefix).
        env("SEED", "1").
        software(mixcrSw).
        arg("findAlleles").
        arg("--report").arg("report.txt").
        saveFile("report.txt").
        arg("--json-report").arg("report.json").
        saveFile("report.json").
        // template specifies where result files will be written
        arg("--output-template").arg("alleles/{file_name}.clns")

    if !is_undefined(globalParams.seed) {
        allelesCmdBuilder.env("SEED", globalParams.seed)
    }

    toProcess := []
    for sKey, inputFile in inputData.inputs() {
        key := json.decode(sKey)
        sampleId := key[0]
        clonotypingBlockId := key[1]
        // file name should encode axis values. It will be parsed by xsv.importFileMap afterwards to restore axis for clones data
        fileName := sampleId + "___" + clonotypingBlockId + ".clns"
        toProcess = append(toProcess, {
            clonotypingBlockId: clonotypingBlockId,
            sampleId: sampleId,
            fileName: fileName,
            input: inputFile
        })
    }

    for input in toProcess {
        allelesCmdBuilder.addFile(input.fileName, input.input).
            arg(input.fileName).
            saveFile("alleles/" + input.fileName)
    }

    alleles := allelesCmdBuilder.run()

    for input in toProcess {
        input.alleles = alleles.getFile("alleles/" + input.fileName)
    }

    if !is_undefined(downsampling) {
        downsamplingParam := ""
        if downsampling.type == "CountReadsFixed" {
            downsamplingParam = "count-reads-fixed-" + string(downsampling.number)
        } else if downsampling.type == "CountMoleculesFixed" {
            downsamplingParam = "count-molecule-fixed-" + string(downsampling.number)
        } else if downsampling.type == "TopClonotypesByReads" {
            downsamplingParam = "top-reads-" + string(downsampling.number)
        } else if downsampling.type == "TopClonotypesByMolecules" {
            downsamplingParam = "top-molecule-" + string(downsampling.number)
        } else if downsampling.type == "CumulativeTopClonotypesByReads" {
            downsamplingParam = "cumtop-reads-" + string(downsampling.percent)
        } else if downsampling.type == "CumulativeTopClonotypesByMolecules" {
            downsamplingParam = "cumtop-molecule-" + string(downsampling.percent)
        } else {
            ll.panic("Unknown downsampling type: " + downsampling.type)
        }

        ll.print("__THE_LOG__ " + downsamplingParam)

        for input in toProcess {
            if datasetTypes[input.clonotypingBlockId] == "bulk" {
                downsamplingCmd := exec.builder().
                    printErrStreamToStdout().
                    secret("MI_LICENSE", "MI_LICENSE").
                    env("MI_PROGRESS_PREFIX", progressPrefix).
                    software(mixcrSw).
                    arg("downsample").
                    arg("--downsampling").
                    arg(downsamplingParam).
                    arg("clones.clns").
                    addFile("clones.clns", input.alleles).
                    saveFile("clones.downsampled.clns").
                    run()
                input.alleles = downsamplingCmd.getFile("clones.downsampled.clns")
            }
        }
    }

    shmTreesCmdBuilder := exec.builder().
        printErrStreamToStdout().
        secret("MI_LICENSE", "MI_LICENSE").
        env("MI_PROGRESS_PREFIX", progressPrefix).
        software(mixcrSw).
        arg("findShmTrees").
        arg("--report").arg("report.txt").
        saveFile("report.txt").
        arg("--json-report").arg("report.json").
        saveFile("report.json")

    if !is_undefined(globalParams.seed) {
        shmTreesCmdBuilder.env("SEED", globalParams.seed)
    }

    for input in toProcess {
        shmTreesCmdBuilder.
            addFile(input.fileName, input.alleles).
            arg(input.fileName)
    }

    shmTreesCmdBuilder.arg("output.shmt").saveFile("output.shmt")

    shmTrees := shmTreesCmdBuilder.run()


    // export trees without nodes
    shmTreeExportsCmdBuilder := exec.builder().
        printErrStreamToStdout().
        inLightQueue().
        secret("MI_LICENSE", "MI_LICENSE").
        env("MI_PROGRESS_PREFIX", progressPrefix).
        software(mixcrSw).
        arg("exportShmTrees")

    for arg in inputs.shmTreeTableOptions {
        shmTreeExportsCmdBuilder = shmTreeExportsCmdBuilder.arg(arg)
    }

    shmTreeExportsCmdBuilder = shmTreeExportsCmdBuilder.
        arg("input.shmt").
        arg("output.tsv").
        addFile("input.shmt", shmTrees.getFile("output.shmt")).
        saveFile("output.tsv")

    shmTreeExports := shmTreeExportsCmdBuilder.run()


    // export tree nodes with data uniq for the node
    shmTreeNodesExportsCmdBuilder := exec.builder().
        printErrStreamToStdout().
        inLightQueue().
        secret("MI_LICENSE", "MI_LICENSE").
        env("MI_PROGRESS_PREFIX", progressPrefix).
        software(mixcrSw).
        arg("exportShmTreesWithNodes")

    for arg in inputs.shmTreeNodesTableOptions {
        shmTreeNodesExportsCmdBuilder = shmTreeNodesExportsCmdBuilder.arg(arg)
    }

    shmTreeNodesExportsCmdBuilder = shmTreeNodesExportsCmdBuilder.
        arg("input.shmt").
        arg("output.tsv").
        addFile("input.shmt", shmTrees.getFile("output.shmt")).
        saveFile("output.tsv")

    shmTreeNodesExports := shmTreeNodesExportsCmdBuilder.run()



    // export nodes with clones. For each node could be several clones
    shmTreeNodesWithClonesExportsCmdBuilder := exec.builder().
        printErrStreamToStdout().
        inLightQueue().
        secret("MI_LICENSE", "MI_LICENSE").
        env("MI_PROGRESS_PREFIX", progressPrefix).
        software(mixcrSw).
        arg("exportShmTreesWithNodes").
        // don't export nodes that don't have clones
        arg("--only-observed")

    for arg in inputs.shmTreeNodesWithClonesTableOptions {
        shmTreeNodesWithClonesExportsCmdBuilder = shmTreeNodesWithClonesExportsCmdBuilder.arg(arg)
    }

    shmTreeNodesWithClonesExportsCmdBuilder = shmTreeNodesWithClonesExportsCmdBuilder.
        arg("input.shmt").
        arg("output.tsv").
        addFile("input.shmt", shmTrees.getFile("output.shmt")).
        saveFile("output.tsv")

    shmTreeNodesWithClonesExports := shmTreeNodesWithClonesExportsCmdBuilder.run()

    return {
        "trees": shmTreeExports.getFile("output.tsv"),
        "treeNodes": shmTreeNodesExports.getFile("output.tsv"),
        "treeNodesWithClones": shmTreeNodesWithClonesExports.getFile("output.tsv"),

        "tsvs": {
            "trees": shmTreeExports.getFile("output.tsv"),
            "treeNodes": shmTreeNodesExports.getFile("output.tsv"),
            "treeNodesWithClones": shmTreeNodesWithClonesExports.getFile("output.tsv")
        },

        "allelesLog": alleles.getStdoutStream(),
        "treesLog": shmTrees.getStdoutStream(),

        "allelesReport": alleles.getFile("report.txt"),
        "treesReport": shmTrees.getFile("report.txt"),

        "allelesReportJson": alleles.getFile("report.json"),
        "treesReportJson": shmTrees.getFile("report.json")
    }
})
