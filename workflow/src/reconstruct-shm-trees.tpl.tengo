self := import("@platforma-sdk/workflow-tengo:tpl")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")
ll := import("@platforma-sdk/workflow-tengo:ll")
assets := import("@platforma-sdk/workflow-tengo:assets")
exec := import("@platforma-sdk/workflow-tengo:exec")

json := import("json")

self.defineOutputs(
    "trees", "treeNodes", "treeNodesWithClones",
    "allelesLog", "treesLog",
    "allelesReport", "treesReport"
)

mixcrSw := assets.importSoftware("@milaboratory/mixcr:main")
progressPrefix := "[==PROGRESS==]"

self.body(func(inputs) {
	inputData := inputs[pConstants.VALUE_FIELD_NAME]

    allelesCmdBuilder := exec.builder().
        printErrStreamToStdout().
        env("MI_PROGRESS_PREFIX", progressPrefix).
        software(mixcrSw).
        arg("findAlleles").
        arg("--report").arg("report.txt").
        saveFile("report.txt").
        arg("--output-template").arg("alleles/{file_name}.clns")

    toProcess := []
    for sKey, inputFile in inputData.inputs() {
        key := json.decode(sKey)
        sampleId := key[0]
        clonotypingBlockId := key[1]
        fileName := sampleId + "___" + clonotypingBlockId + ".clns"
        element := {
            "fileName": fileName,
            "input": inputFile
        }
        toProcess = append(toProcess, element)
    }

    for input in toProcess {
        allelesCmdBuilder.addFile(input.fileName, input.input).
            arg(input.fileName).
            saveFile("alleles/" + input.fileName)
    }

    alleles := allelesCmdBuilder.run()  

    shmTreesCmdBuilder := exec.builder().
        printErrStreamToStdout().
        env("MI_PROGRESS_PREFIX", progressPrefix).
        software(mixcrSw).
        arg("findShmTrees").
        arg("--report").arg("report.txt").
        saveFile("report.txt").
        // TODO support single cell trees
        arg("--dont-combine-tree-by-cells")
    
    for input in toProcess {
        shmTreesCmdBuilder.
            addFile(input.fileName, alleles.getFile("alleles/" + input.fileName)).
            arg(input.fileName)
    }

    shmTreesCmdBuilder.arg("output.shmt").saveFile("output.shmt")

    shmTrees := shmTreesCmdBuilder.run()


    shmTreeExportsCmdBuilder := exec.builder().
        printErrStreamToStdout().
        env("MI_PROGRESS_PREFIX", progressPrefix).
        software(mixcrSw).
        arg("exportShmTrees")
    
    for arg in inputs.shmTreeTableOptions {
        shmTreeExportsCmdBuilder = shmTreeExportsCmdBuilder.arg(arg)
    }

    shmTreeExportsCmdBuilder = shmTreeExportsCmdBuilder.
        arg("input.shmt").
        arg("output.tsv").
        addFile("input.shmt", shmTrees.getFile("output.shmt")).
        saveFile("output.tsv")

    shmTreeExports := shmTreeExportsCmdBuilder.run()



    shmTreeNodesExportsCmdBuilder := exec.builder().
        printErrStreamToStdout().
        env("MI_PROGRESS_PREFIX", progressPrefix).
        software(mixcrSw).
        arg("exportShmTreesWithNodes")

    for arg in inputs.shmTreeNodesTableOptions {
        shmTreeNodesExportsCmdBuilder = shmTreeNodesExportsCmdBuilder.arg(arg)
    }

    shmTreeNodesExportsCmdBuilder = shmTreeNodesExportsCmdBuilder.
        arg("input.shmt").
        arg("output.tsv").
        addFile("input.shmt", shmTrees.getFile("output.shmt")).
        saveFile("output.tsv")

    shmTreeNodesExports := shmTreeNodesExportsCmdBuilder.run()

    shmTreeNodesWithClonesExportsCmdBuilder := exec.builder().
        printErrStreamToStdout().
        env("MI_PROGRESS_PREFIX", progressPrefix).
        software(mixcrSw).
        arg("exportShmTreesWithNodes").
        arg("--only-observed")

    for arg in inputs.shmTreeNodesWithClonesTableOptions {
        shmTreeNodesWithClonesExportsCmdBuilder = shmTreeNodesWithClonesExportsCmdBuilder.arg(arg)
    }

    shmTreeNodesWithClonesExportsCmdBuilder = shmTreeNodesWithClonesExportsCmdBuilder.
        arg("input.shmt").
        arg("output.tsv").
        addFile("input.shmt", shmTrees.getFile("output.shmt")).
        saveFile("output.tsv")

    shmTreeNodesWithClonesExports := shmTreeNodesWithClonesExportsCmdBuilder.run()

    return {
        "trees": shmTreeExports.getFile("output.tsv"),
        "treeNodes": shmTreeNodesExports.getFile("output.tsv"),
        "treeNodesWithClones": shmTreeNodesWithClonesExports.getFile("output.tsv"),

        "allelesLog": alleles.getStdoutStream(),
        "treesLog": shmTrees.getStdoutStream(),

        "allelesReport": alleles.getFile("report.txt"),
        "treesReport": shmTrees.getFile("report.txt")
    }
})