ll := import("@platforma-sdk/workflow-tengo:ll")
maps := import("@platforma-sdk/workflow-tengo:maps")
text := import("text")

// ==============================================
//
// Every function in this file will return:
//   pfconvParams - params to run xsv.importFileMap on exported files
//   cmdArgs - additional args for MiXCR to specify what fields to extract
//
// ==============================================

// TODO: TMP
allowNA := true

addTableAnnotations := func(order, defaultVisibility, label, specAnnotations) {
	return maps.merge(specAnnotations, {
		"pl7.app/table/orderPriority": string(order),
		"pl7.app/table/visibility": defaultVisibility ? "default" : "optional",
		"pl7.app/label": label
	})
}

// export of threes whithout nodes
shmTree := func(dataDescription) {
    axes := []
    columns := []
    cmdArgs := []
    assemblingFeature := dataDescription.assemblingFeature

    cmdArgs = append(cmdArgs, "-treeId")
    axes = append(axes, {
        column: "treeId",
        spec: {
            name: "pl7.app/dendrogram/treeId",
            type: "Long",
            annotations: addTableAnnotations(100000, true, "Tree id", {})
        }
    })

    if dataDescription.cellsAssembled {
        cmdArgs = append(cmdArgs, "-subtreeId")
        axes = append(axes, {
            column: "subtreeId",
            spec: {
                name: "pl7.app/dendrogram/subtreeId",
                type: "Long",
                annotations: addTableAnnotations(90000, true, "Chain id", {})
            }
        })
    }

    if dataDescription.hasCellTags {
        cmdArgs = append(cmdArgs, "-totalUniqueTagCountInTree", "Cell")
        columns = append(columns, {
            column: "totalUniqueCellCountInTree",
            id: "uniq-cell-count",
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/uniqueCellCount",
                valueType: "Long",
                annotations: addTableAnnotations(70000, true, "Number of cells", {})
            }
        })
    }

    if dataDescription.hasUmiTags {
        cmdArgs = append(cmdArgs, "-totalUniqueTagCountInTree", "Molecule")
        columns = append(columns, {
            column: "totalUniqueMoleculeCountInTree",
            id: "uniq-umi-count",
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/uniqueMoleculeCount",
                valueType: "Long",
                annotations: addTableAnnotations(60000, true, "Number of molecules", {})
            }
        })
    }

    cmdArgs = append(cmdArgs, "-numberOfClonesInTree")
    columns = append(columns, {
        column: "numberOfClonesInTree",
        id: "number-of-clones-in-tree",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/numberOfClonesInTree",
            valueType: "Long",
            annotations: addTableAnnotations(80000, true, "Number of clones", {})
        }
    })

    cmdArgs = append(cmdArgs, "-numberOfNodesWithClones")
    columns = append(columns, {
        column: "numberOfNodesWithClones",
        id: "number-of-nodes-with-clones",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/numberOfNodesWithClones",
            valueType: "Long",
            annotations: addTableAnnotations(90000, true, "Number of nodes", {})
        }
    })

    cmdArgs = append(cmdArgs, "-totalReadsCountInTree")
    columns = append(columns, {
        column: "totalReadsCountInTree",
        id: "total-reads-count-in-tree",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/totalReadsCountInTree",
            valueType: "Long",
            annotations: addTableAnnotations(50000, true, "Total reads count", {})
        }
    })

    cmdArgs = append(cmdArgs, "-vHit")
    columns = append(columns, {
        column: "bestVHit",
        id: "v-gene",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "VGene"
            },
            annotations: addTableAnnotations(30000, true, "V gene", {
                type: "V gene name",
                "pl7.app/isDiscreteFilter": "true"
            })
        }
    })

    cmdArgs = append(cmdArgs, "-jHit")
    columns = append(columns, {
        column: "bestJHit",
        id: "j-gene",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "JGene"
            },
            annotations: addTableAnnotations(29000, true, "J gene", {
                type: "J gene name",
                "pl7.app/isDiscreteFilter": "true"
            })
        }
    })

    cmdArgs = append(cmdArgs, "-chains")
    columns = append(columns, {
        column: "chains",
        id: "chains",
        allowNA: allowNA,
        spec: {
            valueType: "String",
            name: "pl7.app/vdj/chain",
            annotations: addTableAnnotations(40000, true, "Chain", {
                "pl7.app/isDiscreteFilter": "true",
                "pl7.app/discreteValues": "['TRA', 'TRB', 'TRG', 'TRD', 'IGH', 'IGK', 'IGL']"
            })
        }
    })
    orderPriority := 20000
    visibility := undefined
    for feature in dataDescription.coveredFeatures {
        cmdArgs = append(cmdArgs, "-nFeature", feature, "mrca")
        if feature == "CDR3" {
            visibility = "default"
        } else {
            visibility = "optional"
        }
        columns = append(columns, {
            column: "nSeq" + feature + "OfMrca",
            id: "n-seq-" + feature + "-mrca",
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/sequence",
                valueType: "String",
                domain: {
                    "pl7.app/vdj/feature": feature,
                    "pl7.app/alphabet": "nucleotide"
                },
                annotations: addTableAnnotations(orderPriority, visibility == "default", feature + " of MRCA nt", {
                    "pl7.app/type": "sequence"
                })
            }
        })
        orderPriority -= 100

        cmdArgs = append(cmdArgs, "-aaFeature", feature, "mrca")
        columns = append(columns, {
            column: "aaSeq" + feature + "OfMrca",
            id: "aa-seq-" + feature + "-mrca",
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/sequence",
                valueType: "String",
                domain: {
                    "pl7.app/vdj/feature": feature,
                    "pl7.app/alphabet": "aminoacid"
                },
                annotations: addTableAnnotations(orderPriority, visibility == "default", feature + " of MRCA aa", {
                    "pl7.app/type": "sequence"
                })
            }
        })
        orderPriority -= 100
    }

    cmdArgs = append(cmdArgs, "-nFeature", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "nSeq" + assemblingFeature + "OfMrca",
        id: "n-seq-" + assemblingFeature + "-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/sequence",
            valueType: "String",
            domain: {
                "pl7.app/vdj/feature": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: addTableAnnotations(10000, true, assemblingFeature + " of MRCA nt", {
                "pl7.app/type": "sequence"
            })
        }
    })

    cmdArgs = append(cmdArgs, "-aaFeature", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "aaSeq" + assemblingFeature + "OfMrca",
        id: "aa-seq-" + assemblingFeature + "-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/sequence",
            valueType: "String",
            domain: {
                "pl7.app/vdj/feature": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: addTableAnnotations(9000, true, assemblingFeature + " of MRCA aa", {
                "pl7.app/type": "sequence"
            })
        }
    })

	return {
        pfconvParams: {
            axes: axes,
            columns: columns,
            storageFormat: "Binary",
            partitionKeyLength: 0
        },
        cmdArgs: cmdArgs
    }
}

// export data that is uniq for node
shmTreeNodes := func(dataDescription) {
    axes := []
    columns := []
    cmdArgs := []
    assemblingFeature := dataDescription.assemblingFeature

    cmdArgs = append(cmdArgs, "-treeId")
    axes = append(axes, {
        column: "treeId",
        spec: {
            name: "pl7.app/dendrogram/treeId",
            type: "Long",
            annotations: addTableAnnotations(100000, true, "Tree id", {})
        }
    })

    if dataDescription.cellsAssembled {
        cmdArgs = append(cmdArgs, "-subtreeId")
        axes = append(axes, {
            column: "subtreeId",
            spec: {
                name: "pl7.app/dendrogram/subtreeId",
                type: "Long",
                annotations: addTableAnnotations(90000, true, "Chain id", {})
            }
        })
    }

    cmdArgs = append(cmdArgs, "-nodeId")
    axes = append(axes, {
        column: "nodeId",
        spec: {
            name: "pl7.app/dendrogram/nodeId",
            type: "Long",
            annotations: addTableAnnotations(80000, true, "Node id", {})
        }
    })

    cmdArgs = append(cmdArgs, "-isObserved")
    columns = append(columns, {
        column: "isObserved",
        id: "is-node-observed",
        allowNA: false,
        spec: {
            name: "pl7.app/dendrogram/isObserved",
            // TODO change to Boolean when it will be supported
            valueType: "String",
            annotations: addTableAnnotations(85000, true, "Is observed in data", {
                "pl7.app/isDiscreteFilter": "true",
                "pl7.app/discreteValues": "['true', 'false']"
            })
        }
    })

    cmdArgs = append(cmdArgs, "-parentId")
    columns = append(columns, {
        column: "parentId",
        id: "parent-id",
        allowNA: true,
        spec: {
            name: "pl7.app/dendrogram/topology",
            valueType: "Long",
            annotations: addTableAnnotations(10000, false, "Parent node id", {
                "pl7.app/dendrogram/isTopology": "true"
            })
        }
    })

    cmdArgs = append(cmdArgs, "-distance", "germline")
    columns = append(columns, {
        column: "DistanceFromGermline",
        id: "distance-from-germline",
        allowNA: true,
        spec: {
            name: "pl7.app/dendrogram/distance",
            valueType: "Double",
            domain: {
                "pl7.app/dendrogram/distance/from": "germline"
            },
            annotations: addTableAnnotations(9000, false, "Distance from germline", {
                "pl7.app/dendrogram/distance/from": "germline", // change to domain only, once can be selected in graphmaker
                "pl7.app/dendrogram/isDistance": "true"
            })
        }
    })

    cmdArgs = append(cmdArgs, "-distance", "parent")
    columns = append(columns, {
        column: "DistanceFromParent",
        id: "distance-from-parent",
        allowNA: true,
        spec: {
            name: "pl7.app/dendrogram/distance",
            valueType: "Double",
            domain: {
                "pl7.app/dendrogram/distance/from": "parent"
            },
            annotations: addTableAnnotations(8900, false, "Distance from parent", {
                "pl7.app/dendrogram/distance/from": "parent", // change to domain only, once can be selected in graphmaker
                "pl7.app/dendrogram/isDistance": "true"
            })
        }
    })

    cmdArgs = append(cmdArgs, "-nMutationsRate")
    columns = append(columns, {
        column: "nMutationsRate",
        id: "n-mutations-rate",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationsRate",
            valueType: "Double",
            domain: {
                "pl7.app/vdj/features": text.join(dataDescription.coveredFeatures, ","),
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: addTableAnnotations(8800, false, "Mutations rate nt", {})
        }
    })

    cmdArgs = append(cmdArgs, "-aaMutationsRate")
    columns = append(columns, {
        column: "aaMutationsRate",
        id: "aa-mutations-rate",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationsRate",
            valueType: "Double",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: addTableAnnotations(8700, false, "Mutations rate aa", {})
        }
    })

    cmdArgs = append(cmdArgs, "-vBestIdentityPercent")
    columns = append(columns, {
        column: "vBestIdentityPercent",
        id: "v-best-identity-percent",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/vIdentityPercent",
            valueType: "Double",
            annotations: addTableAnnotations(8600, false, "V gene identity", {})
        }
    })

    cmdArgs = append(cmdArgs, "-jBestIdentityPercent")
    columns = append(columns, {
        column: "jBestIdentityPercent",
        id: "j-best-identity-percent",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/jIdentityPercent",
            valueType: "Double",
            annotations: addTableAnnotations(8500, false, "J gene identity", {})
        }
    })

    cmdArgs = append(cmdArgs, "-nMutations", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "nMutations"+assemblingFeature+"BasedOnMrca",
        id: "n-mutations-" + assemblingFeature+"-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutations",
            valueType: "String",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: addTableAnnotations(8400, false, assemblingFeature+" nt mutations based on MRCA", {})
        }
    })

    cmdArgs = append(cmdArgs, "-aaMutations", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "aaMutations"+assemblingFeature+"BasedOnMrca",
        id: "aa-mutations"+assemblingFeature+"-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutations",
            valueType: "String",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: addTableAnnotations(8300, false, assemblingFeature+" aa mutations based on MRCA", {})
        }
    })

    cmdArgs = append(cmdArgs, "-nMutations", assemblingFeature, "germline")
    columns = append(columns, {
        column: "nMutations"+assemblingFeature+"BasedOnGermline",
        id: "n-mutations-" + assemblingFeature+"-germline",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutations",
            valueType: "String",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: addTableAnnotations(8200, false, assemblingFeature+" nt mutations based on germline", {})
        }
    })

    cmdArgs = append(cmdArgs, "-aaMutations", assemblingFeature, "germline")
    columns = append(columns, {
        column: "aaMutations"+assemblingFeature+"BasedOnGermline",
        id: "aa-mutations"+assemblingFeature+"-germline",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutations",
            valueType: "String",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: addTableAnnotations(8100, false, assemblingFeature+" aa mutations based on germline", {})
        }
    })

    cmdArgs = append(cmdArgs, "-nMutationsCount", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "nMutationCount"+assemblingFeature+"BasedOnMrca",
        id: "n-mutation-count-"+assemblingFeature+"-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationCount",
            valueType: "Long",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: addTableAnnotations(8000, false, assemblingFeature+" nt mutations count based on MRCA", {})
        }
    })

    cmdArgs = append(cmdArgs, "-aaMutationsCount", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "aaMutationCount"+assemblingFeature+"BasedOnMrca",
        id: "aa-mutation-count-"+assemblingFeature+"-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationCount",
            valueType: "Long",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: addTableAnnotations(7900, false, assemblingFeature+" aa mutations count based on MRCA", {})
        }
    })

    cmdArgs = append(cmdArgs, "-nMutationsCount", assemblingFeature, "germline")
    columns = append(columns, {
        column: "nMutationCount"+assemblingFeature+"BasedOnGermline",
        id: "n-mutation-count-"+assemblingFeature+"-germline",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationCount",
            valueType: "Long",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: addTableAnnotations(7800, false, assemblingFeature+" nt mutations count based on germline", {})
        }
    })

    cmdArgs = append(cmdArgs, "-aaMutationsCount", assemblingFeature, "germline")
    columns = append(columns, {
        column: "aaMutationCount"+assemblingFeature+"BasedOnGermline",
        id: "aa-mutation-count-"+assemblingFeature+"-germline",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationCount",
            valueType: "Long",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: addTableAnnotations(7700, false, assemblingFeature+" aa mutations count based on germline", {})
        }
    })

    cmdArgs = append(cmdArgs, "-vHit")
    columns = append(columns, {
        column: "bestVHit",
        id: "v-gene",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "VGene"
            },
            annotations: addTableAnnotations(49000, true, "V gene", {
                type: "V gene name",
                "pl7.app/isDiscreteFilter": "true"
            })
        }
    })

    cmdArgs = append(cmdArgs, "-jHit")
    columns = append(columns, {
        column: "bestJHit",
        id: "j-gene",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "JGene"
            },
            annotations: addTableAnnotations(47000, true, "J gene", {
                type: "J gene name",
                "pl7.app/isDiscreteFilter": "true"
            })
        }
    })

    orderPriority := 40000
    visibility := undefined
    for feature in dataDescription.coveredFeatures {
        cmdArgs = append(cmdArgs, "-nFeature", feature)
        if feature == "CDR3" {
            visibility = "default"
        } else {
            visibility = "optional"
        }
        columns = append(columns, {
            column: "nSeq" + feature,
            id: "n-seq-" + feature,
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/sequence",
                valueType: "String",
                domain: {
                    "pl7.app/vdj/feature": feature,
                    "pl7.app/alphabet": "nucleotide"
                },
                annotations: addTableAnnotations(orderPriority, visibility == "default", feature + " nt", {
                    "pl7.app/type": "sequence"
                })
            }
        })
        orderPriority -= 100
        cmdArgs = append(cmdArgs, "-aaFeature", feature)
        columns = append(columns, {
            column: "aaSeq" + feature,
            id: "aa-seq-" + feature,
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/sequence",
                valueType: "String",
                domain: {
                    "pl7.app/vdj/feature": feature,
                    "pl7.app/alphabet": "aminoacid"
                },
                annotations: addTableAnnotations(orderPriority, visibility == "default", feature + " aa", {
                    "pl7.app/type": "sequence"
                })
            }
        })
        orderPriority -= 100
    }

    cmdArgs = append(cmdArgs, "-nFeature", assemblingFeature)
    columns = append(columns, {
        column: "nSeq" + assemblingFeature,
        id: "n-seq-" + assemblingFeature,
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/sequence",
            valueType: "String",
            domain: {
                "pl7.app/vdj/feature": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: addTableAnnotations(30000, true, assemblingFeature + " nt", {
                "pl7.app/type": "sequence"
            })
        }
    })

    cmdArgs = append(cmdArgs, "-aaFeature", assemblingFeature)
    columns = append(columns, {
        column: "aaSeq" + assemblingFeature,
        id: "aa-seq-" + assemblingFeature,
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/sequence",
            valueType: "String",
            domain: {
                "pl7.app/vdj/feature": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: addTableAnnotations(29000, true, assemblingFeature + " aa", {
                "pl7.app/type": "sequence"
            })
        }
    })

	return {
        pfconvParams: {
            axes: axes,
            columns: columns,
            storageFormat: "Binary",
            partitionKeyLength: 0
        },
        cmdArgs: cmdArgs
    }
}

// export data that is unique for clones, but not unique for a node
// (different clones could be in the same topology node, for example, different time points)
shmTreeNodesWithClones := func(dataDescription, donorColumn) {
    donorColumnSpec := donorColumn.spec

    axes := []
    columns := []
    cmdArgs := []

    cmdArgs = append(cmdArgs, "-treeId")
    axes = append(axes, {
        column: "treeId",
        spec: {
            name: "pl7.app/dendrogram/treeId",
            type: "Long",
            annotations: addTableAnnotations(100000, true, "Tree id", {})
        }
    })

    if dataDescription.cellsAssembled {
        cmdArgs = append(cmdArgs, "-subtreeId")
        axes = append(axes, {
            column: "subtreeId",
            spec: {
                name: "pl7.app/dendrogram/subtreeId",
                type: "Long",
                annotations: addTableAnnotations(90000, true, "Chain id", {})
            }
        })
    }

    cmdArgs = append(cmdArgs, "-nodeId")
    axes = append(axes, {
        column: "nodeId",
        spec: {
            name: "pl7.app/dendrogram/nodeId",
            type: "Long",
            annotations: addTableAnnotations(80000, true, "Node id", {})
        }
    })

    cmdArgs = append(cmdArgs, "-cloneId")
    axes = append(axes, {
        column: "cloneId",
        id: "clone-id",
        // allowNA: true,
        // filtering off records without clones because we are not interested in them here
        filterOutRegex: "^$",
        spec: {
            name: "pl7.app/vdj/cloneId",
            type: "Long",
            // TODO domain with blockId
            annotations: addTableAnnotations(70000, true, "Clone id", {})
        }
    })

    cmdArgs = append(cmdArgs, "-fileName")
    axes = append(axes, {
        column: "fileName",
        // in case of single cell trees, not all subtrees will be filled for nodes with observed
        // allowNA: true,
        preProcess: [
            {
                type: "regexpReplace",
                pattern: "^(.*)___.*\\.clns$",
                replacement: "$1"
            }
        ],
        spec: donorColumnSpec.axesSpec[0],
        annotations: addTableAnnotations(110000, true, "Sample name", {
            "pl7.app/isDiscreteFilter": "true"
        })
    })

    if dataDescription.hasCellTags {
        cmdArgs = append(cmdArgs, "-uniqueTagCount", "Cell")
        columns = append(columns, {
            column: "uniqueCellCount",
            id: "uniq-cell-count-for-clone",
            allowNA: true,
            spec: {
                name: "pl7.app/vdj/uniqueCellCount",
                valueType: "Long",
                annotations: addTableAnnotations(60000, true, "Number of cells", {})
            }
        })
    }

    if dataDescription.hasUmiTags {
        cmdArgs = append(cmdArgs, "-uniqueTagCount", "Molecule")
        columns = append(columns, {
            column: "uniqueMoleculeCount",
            id: "uniq-umi-count-for-clone",
            allowNA: true,
            spec: {
                name: "pl7.app/vdj/uniqueMoleculeCount",
                valueType: "Long",
                annotations: addTableAnnotations(59000, true, "Number of molecules", {})
            }
        })
    }

    cmdArgs = append(cmdArgs, "-readCount")
    columns = append(columns, {
        column: "readCount",
        id: "read-count",
        allowNA: true,
        spec: {
          name: "pl7.app/vdj/readCount",
          valueType: "Long",
          annotations: addTableAnnotations(58000, true, "Number of Reads", {})
        }
    })

    cmdArgs = append(cmdArgs, "-readFraction")
    columns = append(columns, {
        column: "readFraction",
        id: "read-fraction",
        allowNA: true,
        spec: {
          name: "pl7.app/vdj/readFraction",
          valueType: "Double",
          annotations: addTableAnnotations(57000, true, "Fraction of reads", {})
        }
    })

    cmdArgs = append(cmdArgs, "-dHit")
    columns = append(columns, {
        column: "bestDHit",
        id: "d-gene",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "DGene"
            },
            annotations: addTableAnnotations(48000, true, "Best D hit", {
                type: "D gene name",
                "pl7.app/isDiscreteFilter": "true"
            })
        }
    })

    cmdArgs = append(cmdArgs, "-cHit")
    columns = append(columns, {
        column: "bestCHit",
        id: "c-gene",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "CGene"
            },
            annotations: addTableAnnotations(46000, true, "Best C hit", {
                type: "C gene name",
                "pl7.app/isDiscreteFilter": "true"
            })
        }
    })

    cmdArgs = append(cmdArgs, "-isotype")
    columns = append(columns, {
        column: "isotype",
        id: "isotype",
        allowNA: true,
        spec: {
          valueType: "String",
          name: "pl7.app/vdj/isotype",
          annotations: addTableAnnotations(50000, true, "IG isotype", {
            "pl7.app/isDiscreteFilter": "true"
          })
        }
    })

	return {
        pfconvParams: {
            axes: axes,
            columns: columns,
            storageFormat: "Binary",
            partitionKeyLength: 0
        },
        cmdArgs: cmdArgs
    }
}

shmTreeNodesUniqueIsotype := func(dataDescription) {

    axes := []
    columns := []

    axes = append(axes, {
        column: "treeId",
        spec: {
            name: "pl7.app/dendrogram/treeId",
            type: "Long",
            annotations: addTableAnnotations(100000, true, "Tree id", {})
        }
    })

    if dataDescription.cellsAssembled {
        axes = append(axes, {
            column: "subtreeId",
            spec: {
                name: "pl7.app/dendrogram/subtreeId",
                type: "Long",
                annotations: addTableAnnotations(90000, true, "Chain id", {})
            }
        })
    }

    axes = append(axes, {
        column: "nodeId",
        spec: {
            name: "pl7.app/dendrogram/nodeId",
            type: "Long",
            annotations: addTableAnnotations(80000, true, "Node id", {})
        }
    })

    columns = append(columns, {
        column: "readCount",
        id: "read-count",
        allowNA: true,
        spec: {
          name: "pl7.app/vdj/readCount",
          valueType: "Long",
          annotations: addTableAnnotations(58000, false, "Top clone reads number", {})
        }
    })

    columns = append(columns, {
        column: "isotype",
        id: "isotype",
        allowNA: true,
        spec: {
          valueType: "String",
          name: "pl7.app/vdj/isotype",
          annotations: addTableAnnotations(50000, false, "Top IG isotype", {
            "pl7.app/isDiscreteFilter": "true"
          })
        }
    })

	return {
        pfconvParams: {
            axes: axes,
            columns: columns,
            storageFormat: "Binary",
            partitionKeyLength: 0
        }
    }
}

// to use the file as a library, we should explicitly export functions
export ll.toStrict({
	shmTree: shmTree,
    shmTreeNodes: shmTreeNodes,
    shmTreeNodesWithClones: shmTreeNodesWithClones,
    shmTreeNodesUniqueIsotype: shmTreeNodesUniqueIsotype
})
