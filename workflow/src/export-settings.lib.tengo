ll := import("@platforma-sdk/workflow-tengo:ll")
text := import("text")

// ==============================================
//
// Every function in this file will return:
//   pfconvParams - params to run xsv.importFileMap on exported files
//   cmdArgs - additional args for MiXCR to specify what fields to extract
//
// ==============================================

// TODO: TMP
allowNA := true

// export of threes whithout nodes
shmTreeTableOptions := func(dataDescription) {
    axes := []
    columns := []
    cmdArgs := []
    assemblingFeature := dataDescription.assemblingFeature

    cmdArgs = append(cmdArgs, "-treeId")
    axes = append(axes, {
        column: "treeId",
        spec: {
            name: "pl7.app/dendrogram/treeId",
            type: "Long",
            domain: { },
            annotations: {
                "pl7.app/label": "Tree id",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "100000"
            }
        }
    })

    if dataDescription.cellsAssembled {
        cmdArgs = append(cmdArgs, "-subtreeId")
        axes = append(axes, {
            column: "subtreeId",
            spec: {
                name: "pl7.app/dendrogram/subtreeId",
                type: "Long",
                domain: { },
                annotations: {
                    "pl7.app/label": "Chain id",
                    "pl7.app/table/visibility": "default",
                    "pl7.app/table/orderPriority": "90000"
                }
            }
        })
    }

    if dataDescription.hasCellTags {
        cmdArgs = append(cmdArgs, "-totalUniqueTagCountInTree", "Cell")
        columns = append(columns, {
            column: "totalUniqueCellCountInTree",
            id: "uniq-cell-count",
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/uniqueCellCount",
                valueType: "Long",
                annotations: {
                    "pl7.app/label": "Number of cells",
                    "pl7.app/table/visibility": "default",
                    "pl7.app/table/orderPriority": "70000"
                }
            }
        })
    }

    if dataDescription.hasUmiTags {
        cmdArgs = append(cmdArgs, "-totalUniqueTagCountInTree", "Molecule")
        columns = append(columns, {
            column: "totalUniqueMoleculeCountInTree",
            id: "uniq-umi-count",
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/uniqueMoleculeCount",
                valueType: "Long",
                annotations: {
                    "pl7.app/label": "Number of molecules",
                    "pl7.app/table/visibility": "default",
                    "pl7.app/table/orderPriority": "60000"
                }
            }
        })
    }

    cmdArgs = append(cmdArgs, "-numberOfClonesInTree")
    columns = append(columns, {
        column: "numberOfClonesInTree",
        id: "number-of-clones-in-tree",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/numberOfClonesInTree",
            valueType: "Long",
            annotations: {
                "pl7.app/label": "Number of clones",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "80000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-numberOfNodesWithClones")
    columns = append(columns, {
        column: "numberOfNodesWithClones",
        id: "number-of-nodes-with-clones",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/numberOfNodesWithClones",
            valueType: "Long",
            annotations: {
                "pl7.app/label": "Number of nodes",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "90000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-totalReadsCountInTree")
    columns = append(columns, {
        column: "totalReadsCountInTree",
        id: "total-reads-count-in-tree",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/totalReadsCountInTree",
            valueType: "Long",
            annotations: {
                "pl7.app/label": "Total reads count",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "50000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-vHit")
    columns = append(columns, {
        column: "bestVHit",
        id: "v-gene",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "VGene"
            },
            annotations: {
                type: "V gene name",
                "pl7.app/label": "V gene",
                "pl7.app/isDiscreteFilter": "true",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "30000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-jHit")
    columns = append(columns, {
        column: "bestJHit",
        id: "j-gene",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "JGene"
            },
            annotations: {
                type: "J gene name",
                "pl7.app/label": "J gene",
                "pl7.app/isDiscreteFilter": "true",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "29000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-chains")
    columns = append(columns, {
        column: "chains",
        id: "chains",
        allowNA: allowNA,
        spec: {
            valueType: "String",
            name: "pl7.app/vdj/chain",
            annotations: {
                "pl7.app/label": "Chain",
                "pl7.app/isDiscreteFilter": "true",
                "pl7.app/discreteValues": "['TRA', 'TRB', 'TRG', 'TRD', 'IGH', 'IGK', 'IGL']",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "40000"
            }
        }
    })
    orderPriority := 20000
    visibility := undefined
    for feature in dataDescription.coveredFeatures {
        cmdArgs = append(cmdArgs, "-nFeature", feature, "mrca")
        if feature == "CDR3" {
            visibility = "default"
        } else {
            visibility = "optional"
        }
        columns = append(columns, {
            column: "nSeq" + feature + "OfMrca",
            id: "n-seq-" + feature + "-mrca",
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/sequence",
                valueType: "String",
                domain: {
                    "pl7.app/vdj/feature": feature,
                    "pl7.app/alphabet": "nucleotide"
                },
                annotations: {
                    "pl7.app/type": "sequence",
                    "pl7.app/label": feature + " of MRCA nt",
                    "pl7.app/table/visibility": visibility,
                    "pl7.app/table/orderPriority": string(orderPriority)
                }
            }
        })
        orderPriority -= 100

        cmdArgs = append(cmdArgs, "-aaFeature", feature, "mrca")
        columns = append(columns, {
            column: "aaSeq" + feature + "OfMrca",
            id: "aa-seq-" + feature + "-mrca",
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/sequence",
                valueType: "String",
                domain: {
                    "pl7.app/vdj/feature": feature,
                    "pl7.app/alphabet": "aminoacid"
                },
                annotations: {
                    "pl7.app/type": "sequence",
                    "pl7.app/label": feature + " of MRCA aa",
                    "pl7.app/table/visibility": visibility,
                    "pl7.app/table/orderPriority": string(orderPriority)
                }
            }
        })
        orderPriority -= 100
    }

    cmdArgs = append(cmdArgs, "-nFeature", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "nSeq" + assemblingFeature + "OfMrca",
        id: "n-seq-" + assemblingFeature + "-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/sequence",
            valueType: "String",
            domain: {
                "pl7.app/vdj/feature": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: {
                "pl7.app/type": "sequence",
                "pl7.app/label": assemblingFeature + " of MRCA nt",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "10000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-aaFeature", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "aaSeq" + assemblingFeature + "OfMrca",
        id: "aa-seq-" + assemblingFeature + "-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/sequence",
            valueType: "String",
            domain: {
                "pl7.app/vdj/feature": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: {
                "pl7.app/type": "sequence",
                "pl7.app/label": assemblingFeature + " of MRCA aa",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "9000"
            }
        }
    })

	return {
        pfconvParams: {
            axes: axes,
            columns: columns,
            storageFormat: "Binary",
            partitionKeyLength: 0
        },
        cmdArgs: cmdArgs
    }
}

// export data that is uniq for node
shmTreeNodesTableOptions := func(dataDescription) {
    axes := []
    columns := []
    cmdArgs := []
    assemblingFeature := dataDescription.assemblingFeature

    cmdArgs = append(cmdArgs, "-treeId")
    axes = append(axes, {
        column: "treeId",
        spec: {
            name: "pl7.app/dendrogram/treeId",
            type: "Long",
            domain: { },
            annotations: {
                "pl7.app/label": "Tree id",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "100000"
            }
        }
    })

    if dataDescription.cellsAssembled {
        cmdArgs = append(cmdArgs, "-subtreeId")
        axes = append(axes, {
            column: "subtreeId",
            spec: {
                name: "pl7.app/dendrogram/subtreeId",
                type: "Long",
                domain: { },
                annotations: {
                    "pl7.app/label": "Chain id",
                    "pl7.app/table/visibility": "default",
                    "pl7.app/table/orderPriority": "90000"
                }
            }
        })
    }

    cmdArgs = append(cmdArgs, "-nodeId")
    axes = append(axes, {
        column: "nodeId",
        spec: {
            name: "pl7.app/dendrogram/nodeId",
            type: "Long",
            domain: { },
            annotations: {
                "pl7.app/label": "Node id",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "80000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-isObserved")
    columns = append(columns, {
        column: "isObserved",
        id: "is-node-observed",
        allowNA: false,
        spec: {
            name: "pl7.app/dendrogram/isObserved",
            // TODO change to Boolean when it will be supported
            valueType: "String",
            annotations: {
                "pl7.app/label": "Is observed in data",
                "pl7.app/isDiscreteFilter": "true",
                "pl7.app/discreteValues": "['true', 'false']",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "85000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-parentId")
    columns = append(columns, {
        column: "parentId",
        id: "parent-id",
        allowNA: true,
        spec: {
            name: "pl7.app/dendrogram/topology",
            valueType: "Long",
            annotations: {
                "pl7.app/label": "Parent node id",
                "pl7.app/dendrogram/isTopology": "true",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "10000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-distance", "germline")
    columns = append(columns, {
        column: "DistanceFromGermline",
        id: "distance-from-germline",
        allowNA: true,
        spec: {
            name: "pl7.app/dendrogram/distance",
            valueType: "Double",
            domain: {
                "pl7.app/dendrogram/distance/from": "germline"
            },
            annotations: {
                "pl7.app/label": "Distanse from germline",
                "pl7.app/dendrogram/distance/from": "germline", // change to domain only, once can be selected in graphmaker
                "pl7.app/dendrogram/isDistance": "true",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "9000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-distance", "parent")
    columns = append(columns, {
        column: "DistanceFromParent",
        id: "distance-from-parent",
        allowNA: true,
        spec: {
            name: "pl7.app/dendrogram/distance",
            valueType: "Double",
            domain: {
                "pl7.app/dendrogram/distance/from": "parent"
            },
            annotations: {
                "pl7.app/label": "Distanse from parent",
                "pl7.app/dendrogram/distance/from": "parent", // change to domain only, once can be selected in graphmaker
                "pl7.app/dendrogram/isDistance": "true",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "8900"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-nMutationsRate")
    columns = append(columns, {
        column: "nMutationsRate",
        id: "n-mutations-rate",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationsRate",
            valueType: "Double",
            domain: {
                "pl7.app/vdj/features": text.join(dataDescription.coveredFeatures, ","),
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: {
                "pl7.app/label": "Mutations rate nt",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "8800"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-aaMutationsRate")
    columns = append(columns, {
        column: "aaMutationsRate",
        id: "aa-mutations-rate",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationsRate",
            valueType: "Double",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: {
                "pl7.app/label": "Mutations rate aa",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "8700"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-vBestIdentityPercent")
    columns = append(columns, {
        column: "vBestIdentityPercent",
        id: "v-best-identity-percent",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/vIdentityPercent",
            valueType: "Double",
            annotations: {
                "pl7.app/label": "V gene identity",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "8600"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-jBestIdentityPercent")
    columns = append(columns, {
        column: "jBestIdentityPercent",
        id: "j-best-identity-percent",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/jIdentityPercent",
            valueType: "Double",
            annotations: {
                "pl7.app/label": "J gene identity",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "8500"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-nMutations", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "nMutations"+assemblingFeature+"BasedOnMrca",
        id: "n-mutations-" + assemblingFeature+"-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutations",
            valueType: "String",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: {
                "pl7.app/label": assemblingFeature+" nt mutations based on MRCA",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "8400"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-aaMutations", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "aaMutations"+assemblingFeature+"BasedOnMrca",
        id: "aa-mutations"+assemblingFeature+"-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutations",
            valueType: "String",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: {
                "pl7.app/label": assemblingFeature+" aa mutations based on MRCA",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "8300"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-nMutations", assemblingFeature, "germline")
    columns = append(columns, {
        column: "nMutations"+assemblingFeature+"BasedOnGermline",
        id: "n-mutations-" + assemblingFeature+"-germline",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutations",
            valueType: "String",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: {
                "pl7.app/label": assemblingFeature+" nt mutations based on germline",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "8200"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-aaMutations", assemblingFeature, "germline")
    columns = append(columns, {
        column: "aaMutations"+assemblingFeature+"BasedOnGermline",
        id: "aa-mutations"+assemblingFeature+"-germline",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutations",
            valueType: "String",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: {
                "pl7.app/label": assemblingFeature+" aa mutations based on germline",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "8100"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-nMutationsCount", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "nMutationCount"+assemblingFeature+"BasedOnMrca",
        id: "n-mutation-count-"+assemblingFeature+"-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationCount",
            valueType: "Long",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: {
                "pl7.app/label": assemblingFeature+" nt mutations count based on MRCA",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "8000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-aaMutationsCount", assemblingFeature, "mrca")
    columns = append(columns, {
        column: "aaMutationCount"+assemblingFeature+"BasedOnMrca",
        id: "aa-mutation-count-"+assemblingFeature+"-mrca",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationCount",
            valueType: "Long",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: {
                "pl7.app/label": assemblingFeature+" aa mutations count based on MRCA",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "7900"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-nMutationsCount", assemblingFeature, "germline")
    columns = append(columns, {
        column: "nMutationCount"+assemblingFeature+"BasedOnGermline",
        id: "n-mutation-count-"+assemblingFeature+"-germline",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationCount",
            valueType: "Long",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: {
                "pl7.app/label": assemblingFeature+" nt mutations count based on germline",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "7800"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-aaMutationsCount", assemblingFeature, "germline")
    columns = append(columns, {
        column: "aaMutationCount"+assemblingFeature+"BasedOnGermline",
        id: "aa-mutation-count-"+assemblingFeature+"-germline",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/mutationCount",
            valueType: "Long",
            domain: {
                "pl7.app/vdj/features": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: {
                "pl7.app/label": assemblingFeature+" aa mutations count based on germline",
                "pl7.app/table/visibility": "optional",
                "pl7.app/table/orderPriority": "7700"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-vHit")
    columns = append(columns, {
        column: "bestVHit",
        id: "v-gene",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "VGene"
            },
            annotations: {
                type: "V gene name",
                "pl7.app/label": "V gene",
                "pl7.app/isDiscreteFilter": "true",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "49000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-jHit")
    columns = append(columns, {
        column: "bestJHit",
        id: "j-gene",
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "JGene"
            },
            annotations: {
                type: "J gene name",
                "pl7.app/label": "J gene",
                "pl7.app/isDiscreteFilter": "true",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "47000"
            }
        }
    })

    orderPriority := 40000
    visibility := undefined
    for feature in dataDescription.coveredFeatures {
        cmdArgs = append(cmdArgs, "-nFeature", feature)
        if feature == "CDR3" {
            visibility = "default"
        } else {
            visibility = "optional"
        }
        columns = append(columns, {
            column: "nSeq" + feature,
            id: "n-seq-" + feature,
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/sequence",
                valueType: "String",
                domain: {
                    "pl7.app/vdj/feature": feature,
                    "pl7.app/alphabet": "nucleotide"
                },
                annotations: {
                    "pl7.app/type": "sequence",
                    "pl7.app/label": feature + " nt",
                    "pl7.app/table/visibility": visibility,
                    "pl7.app/table/orderPriority": string(orderPriority)
                }
            }
        })
        orderPriority -= 100
        cmdArgs = append(cmdArgs, "-aaFeature", feature)
        columns = append(columns, {
            column: "aaSeq" + feature,
            id: "aa-seq-" + feature,
            allowNA: allowNA,
            spec: {
                name: "pl7.app/vdj/sequence",
                valueType: "String",
                domain: {
                    "pl7.app/vdj/feature": feature,
                    "pl7.app/alphabet": "aminoacid"
                },
                annotations: {
                    "pl7.app/type": "sequence",
                    "pl7.app/label": feature + " aa",
                    "pl7.app/table/visibility": visibility,
                    "pl7.app/table/orderPriority": string(orderPriority)
                }
            }
        })
        orderPriority -= 100
    }

    cmdArgs = append(cmdArgs, "-nFeature", assemblingFeature)
    columns = append(columns, {
        column: "nSeq" + assemblingFeature,
        id: "n-seq-" + assemblingFeature,
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/sequence",
            valueType: "String",
            domain: {
                "pl7.app/vdj/feature": assemblingFeature,
                "pl7.app/alphabet": "nucleotide"
            },
            annotations: {
                "pl7.app/type": "sequence",
                "pl7.app/label": assemblingFeature + " nt",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "30000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-aaFeature", assemblingFeature)
    columns = append(columns, {
        column: "aaSeq" + assemblingFeature,
        id: "aa-seq-" + assemblingFeature,
        allowNA: allowNA,
        spec: {
            name: "pl7.app/vdj/sequence",
            valueType: "String",
            domain: {
                "pl7.app/vdj/feature": assemblingFeature,
                "pl7.app/alphabet": "aminoacid"
            },
            annotations: {
                "pl7.app/type": "sequence",
                "pl7.app/label": assemblingFeature + " aa",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "29000"
            }
        }
    })

	return {
        pfconvParams: {
            axes: axes,
            columns: columns,
            storageFormat: "Binary",
            partitionKeyLength: 0
        },
        cmdArgs: cmdArgs
    }
}

// export data that is unique for clones, but not unique for a node
// (different clones could be in the same topology node, for example, different time points)
shmTreeNodesWithClonesTableOptions := func(dataDescription, donorColumn) {
    donorColumnSpec := donorColumn.spec

    axes := []
    columns := []
    cmdArgs := []

    cmdArgs = append(cmdArgs, "-treeId")
    axes = append(axes, {
        column: "treeId",
        spec: {
            name: "pl7.app/dendrogram/treeId",
            type: "Long",
            domain: { },
            annotations: {
                "pl7.app/label": "Tree id",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "100000"
            }
        }
    })

    if dataDescription.cellsAssembled {
        cmdArgs = append(cmdArgs, "-subtreeId")
        axes = append(axes, {
            column: "subtreeId",
            spec: {
                name: "pl7.app/dendrogram/subtreeId",
                type: "Long",
                domain: { },
                annotations: {
                    "pl7.app/label": "Chain id",
                    "pl7.app/table/visibility": "default",
                    "pl7.app/table/orderPriority": "90000"
                }
            }
        })
    }

    cmdArgs = append(cmdArgs, "-nodeId")
    axes = append(axes, {
        column: "nodeId",
        spec: {
            name: "pl7.app/dendrogram/nodeId",
            type: "Long",
            domain: { },
            annotations: {
                "pl7.app/label": "Node id",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "80000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-fileName")
    axes = append(axes, {
        column: "fileName",
        // in case of single cell trees, not all subtrees will be filled for nodes with observed
        // allowNA: true,
        preProcess: [
            {
                type: "regexpReplace",
                pattern: "^(.*)___.*\\.clns$",
                replacement: "$1"
            }
        ],
        spec: donorColumnSpec.axesSpec[0],
        annotations: {
            "pl7.app/label": "Sample name",
            "pl7.app/isDiscreteFilter": "true",
            "pl7.app/table/visibility": "default",
            "pl7.app/table/orderPriority": "110000"
        }
    })

    cmdArgs = append(cmdArgs, "-cloneId")
    axes = append(axes, {
        column: "cloneId",
        id: "clone-id",
        // allowNA: true,
        // filtering off records without clones because we are not interested in them here
        filterOutRegex: "^$",
        spec: {
            name: "pl7.app/vdj/cloneId",
            type: "Long",
            // TODO domain with blockId
            annotations: {
                "pl7.app/label": "Clone id",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "70000"
            }
        }
    })

    if dataDescription.hasCellTags {
        cmdArgs = append(cmdArgs, "-uniqueTagCount", "Cell")
        columns = append(columns, {
            column: "uniqueCellCount",
            id: "uniq-cell-count-for-clone",
            allowNA: true,
            spec: {
                name: "pl7.app/vdj/uniqueCellCount",
                valueType: "Long",
                annotations: {
                    "pl7.app/label": "Number of cells",
                    "pl7.app/table/visibility": "default",
                    "pl7.app/table/orderPriority": "60000"
                }
            }
        })
    }

    if dataDescription.hasUmiTags {
        cmdArgs = append(cmdArgs, "-uniqueTagCount", "Molecule")
        columns = append(columns, {
            column: "uniqueMoleculeCount",
            id: "uniq-umi-count-for-clone",
            allowNA: true,
            spec: {
                name: "pl7.app/vdj/uniqueMoleculeCount",
                valueType: "Long",
                annotations: {
                    "pl7.app/label": "Number of molecules",
                    "pl7.app/table/visibility": "default",
                    "pl7.app/table/orderPriority": "59000"
                }
            }
        })
    }

    cmdArgs = append(cmdArgs, "-readCount")
    columns = append(columns, {
        column: "readCount",
        id: "read-count",
        allowNA: true,
        spec: {
          name: "pl7.app/vdj/readCount",
          valueType: "Long",
          annotations: {
            "pl7.app/label": "Number of Reads",
            "pl7.app/table/visibility": "default",
            "pl7.app/table/orderPriority": "58000"
          }
        }
    })

    cmdArgs = append(cmdArgs, "-readFraction")
    columns = append(columns, {
        column: "readFraction",
        id: "read-fraction",
        allowNA: true,
        spec: {
          name: "pl7.app/vdj/readFraction",
          valueType: "Double",
          annotations: {
            "pl7.app/label": "Fraction of reads",
            "pl7.app/table/visibility": "default",
            "pl7.app/table/orderPriority": "57000"
          }
        }
    })

    cmdArgs = append(cmdArgs, "-dHit")
    columns = append(columns, {
        column: "bestDHit",
        id: "d-gene",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "DGene"
            },
            annotations: {
                type: "D gene name",
                "pl7.app/label": "Best D hit",
                "pl7.app/isDiscreteFilter": "true",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "48000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-cHit")
    columns = append(columns, {
        column: "bestCHit",
        id: "c-gene",
        allowNA: true,
        spec: {
            name: "pl7.app/vdj/geneHit",
            valueType: "String",
            domain: {
                "pl7.app/vdj/reference": "CGene"
            },
            annotations: {
                type: "C gene name",
                "pl7.app/label": "Best C hit",
                "pl7.app/isDiscreteFilter": "true",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "46000"
            }
        }
    })

    cmdArgs = append(cmdArgs, "-isotype")
    columns = append(columns, {
        column: "isotype",
        id: "isotype",
        allowNA: true,
        spec: {
          valueType: "String",
          name: "pl7.app/vdj/isotype",
          annotations: {
            "pl7.app/label": "IG isotype",
            "pl7.app/isDiscreteFilter": "true",
            "pl7.app/table/visibility": "default",
            "pl7.app/table/orderPriority": "50000"
          }
        }
    })

	return {
        pfconvParams: {
            axes: axes,
            columns: columns,
            storageFormat: "Binary",
            partitionKeyLength: 0
        },
        cmdArgs: cmdArgs
    }
}

shmTreeNodesUniqueIsotypeTableOptions := func(dataDescription) {

    axes := []
    columns := []

    axes = append(axes, {
        column: "treeId",
        spec: {
            name: "pl7.app/dendrogram/treeId",
            type: "Long",
            domain: { },
            annotations: {
                "pl7.app/label": "Tree id",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "100000"
            }
        }
    })

    if dataDescription.cellsAssembled {
        axes = append(axes, {
            column: "subtreeId",
            spec: {
                name: "pl7.app/dendrogram/subtreeId",
                type: "Long",
                domain: { },
                annotations: {
                    "pl7.app/label": "Chain id",
                    "pl7.app/table/visibility": "default",
                    "pl7.app/table/orderPriority": "90000"
                }
            }
        })
    }

    axes = append(axes, {
        column: "nodeId",
        spec: {
            name: "pl7.app/dendrogram/nodeId",
            type: "Long",
            domain: { },
            annotations: {
                "pl7.app/label": "Node id",
                "pl7.app/table/visibility": "default",
                "pl7.app/table/orderPriority": "80000"
            }
        }
    })

    columns = append(columns, {
        column: "readCount",
        id: "read-count",
        allowNA: true,
        spec: {
          name: "pl7.app/vdj/readCount",
          valueType: "Long",
          annotations: {
            "pl7.app/label": "Top clone reads number",
            "pl7.app/table/visibility": "optional",
            "pl7.app/table/orderPriority": "58000"
          }
        }
    })

    columns = append(columns, {
        column: "isotype",
        id: "isotype",
        allowNA: true,
        spec: {
          valueType: "String",
          name: "pl7.app/vdj/isotype",
          annotations: {
            "pl7.app/label": "Top IG isotype",
            "pl7.app/isDiscreteFilter": "true",
            "pl7.app/table/visibility": "optional",
            "pl7.app/table/orderPriority": "50000"
          }
        }
    })

	return {
        pfconvParams: {
            axes: axes,
            columns: columns,
            storageFormat: "Binary",
            partitionKeyLength: 0
        }
    }
}

// to use the file as a library, we should explicitly export functions
export ll.toStrict({
	shmTreeTableOptions: shmTreeTableOptions,
    shmTreeNodesTableOptions: shmTreeNodesTableOptions,
    shmTreeNodesWithClonesTableOptions: shmTreeNodesWithClonesTableOptions,
    shmTreeNodesUniqueIsotypeTableOptions: shmTreeNodesUniqueIsotypeTableOptions
})
