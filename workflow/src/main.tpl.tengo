wf := import("@platforma-sdk/workflow-tengo:workflow")

render := import("@platforma-sdk/workflow-tengo:render")
assets := import("@platforma-sdk/workflow-tengo:assets")
ll := import("@platforma-sdk/workflow-tengo:ll")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

processTpl := assets.importTemplate(":process")

wf.body(func(args) {
	if is_undefined(args.donorColumn) {
		ll.panic("No donor column")
	}

	if (len(args.datasetColumns) == 0) {
		ll.panic("No datasets to process")
	}

	// we could not use array as request for waiting (see below), so we store datasets in a dictionary
	datasets := {}
	for datasetRef in args.datasetColumns {
		if is_undefined(datasetRef) {
			ll.panic("Dataset is undefined")
		}
		// it's blockId of MiXCR, we suppose that it procuce only one clns column
		datasets[datasetRef.blockId] = wf.resolve(datasetRef)
	}

	donorColumn := wf.resolve(args.donorColumn)

	// The problem is that refs for data is not resolved.
	// To deal with it, we should call resolve resolve that will return feature.
	// Then to resolve feature we should call another templete where we will describe what's to wait
	results := render.createEphemeral(processTpl, {
		datasets: datasets,
		donorColumn: donorColumn,
		params: {
			downsampling: args.downsampling
		}
	})

	return {
		outputs: {
			"trees": results.output("trees"),
			"treeNodes": results.output("treeNodes"),
			"treeNodesWithClones": results.output("treeNodesWithClones"),

			"tsvs": results.output("tsvs"),
			"allelesLogs": results.output("allelesLogs"),
			"treesLogs": results.output("treesLogs"),

			// files should be explicitly published, otherwise it will not be assesable from GUI
			// that's why pframes.exportColumnData
			"allelesReports": pframes.exportColumnData(results.output("allelesReports")),
			"treesReports": pframes.exportColumnData(results.output("treesReports")),
			"allelesReportsJson": pframes.exportColumnData(results.output("allelesReportsJson")),
			"treesReportsJson": pframes.exportColumnData(results.output("treesReportsJson"))
		},
		exports: {}
	}
})
