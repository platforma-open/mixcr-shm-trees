self := import("@platforma-sdk/workflow-tengo:tpl")

llPFrames := import("@platforma-sdk/workflow-tengo:pframes.ll")
ll := import("@platforma-sdk/workflow-tengo:ll")
assets := import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
text := import("text")
exportSettings := import(":export-settings")
prepareDonorColumn := import(":prepare-donor-column")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

reconstructShmTreesTpl := assets.importTemplate(":reconstruct-shm-trees")

self.awaitState("datasets", { wildcard: "*" }, "ResourceReady")
self.awaitState("donorColumn", "ResourceReady")

self.body(func(inputs) {
    dataDescription := {
		"hasUmiTags": false,
		"hasCellTags": false,
		"coveredFeatures": []
	}

	assemblingFeature := ""
	for _, dataset in inputs.datasets {
		presetAnnotations := dataset.get("spec").getDataAsJson()["annotations"]
	
		if presetAnnotations["mixcr.com/cellTags"] != "" {
			dataDescription["hasCellTags"] = true
		}
		if presetAnnotations["mixcr.com/umiTags"] != "" {
			dataDescription["hasUmiTags"] = true
		}
		dataDescription["coveredFeatures"] = text.re_split(',', presetAnnotations["mixcr.com/coveredFeaturesOnExport"])
		if (assemblingFeature == "") {
			assemblingFeature = dataDescription["mixcr.com/assemblingFeature"]
		} else if (assemblingFeature != dataDescription["mixcr.com/assemblingFeature"]) {
			ll.panic("Assmble features should be the same for process tress. Got " + assemblingFeature + " and " + dataDescription["mixcr.com/assemblingFeature"])
		}
	}

	dataGroupedByDonorId := prepareDonorColumn.groupDataByDonorId(inputs.donorColumn, inputs.datasets)

	shmTreeTableOptions := exportSettings.shmTreeTableOptions(dataDescription, false)
	shmTreeNodesTableOptions := exportSettings.shmTreeNodesTableOptions(dataDescription, false)

	mixcrResults := llPFrames.aggregate(
		dataGroupedByDonorId["data"], 
		[1, 2], 
		reconstructShmTreesTpl,
		[
			{
				"name": "allelesLog", 
				"type": "Resource"
			}, {
				"name": "treesLog", 
				"type": "Resource"
			}, {
				"name": "trees", 
				"type": "Resource"
			}, {
				"name": "treeNodes", 
				"type": "Resource"
			}
		],
		false,
		{
			"shmTreeTableOptions": shmTreeTableOptions["cmdArgs"],
			"shmTreeNodesTableOptions": shmTreeNodesTableOptions["cmdArgs"]
		}
	)

	trees := xsv.importFileMap(
        mixcrResults.output("trees"), 
        "tsv", 
        shmTreeTableOptions["pfconvParams"],
        {
            additionalAxesSpec: dataGroupedByDonorId["spec"]["axesSpec"][:1]
        }
    )

	treeNodes := xsv.importFileMap(
        mixcrResults.output("treeNodes"), 
        "tsv", 
        shmTreeNodesTableOptions["pfconvParams"],
        {
            additionalAxesSpec: dataGroupedByDonorId["spec"]["axesSpec"][:1]
        }
    )

    return {
        "allelesLog": mixcrResults.output("allelesLog"),
        "treesLog": mixcrResults.output("treesLog"),
        "trees": pframes.exportFrame(trees),
        "treeNodes": pframes.exportFrame(treeNodes)
	}
})